{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"First-time setup Before we start playing with the MQTT protocol for our IoT class, there are some initial preparations that we must do. The supported devices These are some microcontrollers with IoT capabilities: from left to right: ESP 32, Lolin Wemos D1 Mini Clone, and Arduino Uno R4 WiFi. Do not forget to get the correct USB cable . Arduino IDE Download and install the Arduino IDE from the official website . Additional board manager ESP 8266 and ESP 32 are not in the default Arduino board list. For ESP 8266, add http://arduino.esp8266.com/stable/package_esp8266com_index.json to the Additional Boards Manager URLs , which can be found in this menu: File >> \"Preferences >> Settings As for ESP 32, add https://espressif.github.io/arduino-esp32/package_esp32_index.json to the Additional Boards Manager URLs ESP 32 Follow this official documentation form Espressif: https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html ESP 8266 Follow this official documentation form Espressif: https://arduino-esp8266.readthedocs.io/en/latest/installing.html The cheapest 8266 board is the clone version which uses CH340/341 chip for communication purposes. In this case, if you are using Windows, follow this instruction to install the necessary driver: - Video guide: https://www.youtube.com/watch?v=IxH_1LApjPc - Driver: v3.4 or v3.5 There are some reports that the latest driver is problematic. Thus, we will use v3.4 or v3.5. Finally, in the Arduino IDE, we can now set the device to: \"LOLIN (WEMOS) D1 mini (clone)\". Do this from the menu Tools >> Board >> ESP 8266 Boards (3.1.2) >> LOLIN (WEMOS) D1 mini (clone) Arduino UNO R4 WiFi The official instruction can be found here: https://docs.arduino.cc/tutorials/uno-r4-wifi/r4-wifi-getting-started/ Connecting to the University WiFi Our university uses enterprise WiFi in its campus. Depending on your device, use the following codes to connect to the university WiFi: ESP 8266 #include <ESP8266WiFi.h> extern \"C\" { #include \"user_interface.h\" #include \"wpa2_enterprise.h\" #include \"c_types.h\" } // SSID to connect to char ssid[] = \"TelU-Connect\"; char username[] = \"your_username\"; char identity[] = \"your_username\"; char password[] = \"your_password\"; void setup() { WiFi.mode(WIFI_STA); Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // Setting ESP into STATION mode only (no AP mode or dual mode) wifi_set_opmode(STATION_MODE); wifi_station_set_wpa2_enterprise_auth(1); wifi_station_set_enterprise_identity((uint8*)identity, strlen(identity)); wifi_station_set_enterprise_username((uint8*)username, strlen(username)); wifi_station_set_enterprise_password((uint8*)password, strlen((char*)password)); wifi_station_connect(); while (WiFi.status() != WL_CONNECTED) { delay(1000); Serial.print(\"-\"); } Serial.println(); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); } void loop() { } ESP 32 #include \"esp_eap_client.h\" #include <WiFi.h> const char* ssid = \"TelU-Connect\"; // your ssid #define EAP_ID \"USERNAME\" #define EAP_USERNAME \"USERNAME\" #define EAP_PASSWORD \"PASSWORD\" void setup() { Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // WPA2 enterprise magic starts here WiFi.disconnect(true); esp_eap_client_set_identity((uint8_t *)EAP_ID, strlen(EAP_ID)); esp_eap_client_set_username((uint8_t *)EAP_USERNAME, strlen(EAP_USERNAME)); esp_eap_client_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD)); esp_wifi_sta_enterprise_enable(); // WPA2 enterprise magic ends here WiFi.begin(ssid); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } Serial.println(\"\"); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); } Uno R4 WiFi Assignments Create a reusable function that can be used easily to connect to the campus internet. The prototype of the function should look like one of the followings: - void connect_to_campus_wifi_esp866(char* id, char* pwd) - void connect_to_campus_wifi_esp32(char* id, char* pwd) - void connect_to_campus_wifi_unor4(char* id, char* pwd)","title":"First-time setup"},{"location":"#first-time-setup","text":"Before we start playing with the MQTT protocol for our IoT class, there are some initial preparations that we must do.","title":"First-time setup"},{"location":"#the-supported-devices","text":"These are some microcontrollers with IoT capabilities: from left to right: ESP 32, Lolin Wemos D1 Mini Clone, and Arduino Uno R4 WiFi. Do not forget to get the correct USB cable .","title":"The supported devices"},{"location":"#arduino-ide","text":"Download and install the Arduino IDE from the official website .","title":"Arduino IDE"},{"location":"#additional-board-manager","text":"ESP 8266 and ESP 32 are not in the default Arduino board list. For ESP 8266, add http://arduino.esp8266.com/stable/package_esp8266com_index.json to the Additional Boards Manager URLs , which can be found in this menu: File >> \"Preferences >> Settings As for ESP 32, add https://espressif.github.io/arduino-esp32/package_esp32_index.json to the Additional Boards Manager URLs","title":"Additional board manager"},{"location":"#esp-32","text":"Follow this official documentation form Espressif: https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html","title":"ESP 32"},{"location":"#esp-8266","text":"Follow this official documentation form Espressif: https://arduino-esp8266.readthedocs.io/en/latest/installing.html The cheapest 8266 board is the clone version which uses CH340/341 chip for communication purposes. In this case, if you are using Windows, follow this instruction to install the necessary driver: - Video guide: https://www.youtube.com/watch?v=IxH_1LApjPc - Driver: v3.4 or v3.5 There are some reports that the latest driver is problematic. Thus, we will use v3.4 or v3.5. Finally, in the Arduino IDE, we can now set the device to: \"LOLIN (WEMOS) D1 mini (clone)\". Do this from the menu Tools >> Board >> ESP 8266 Boards (3.1.2) >> LOLIN (WEMOS) D1 mini (clone)","title":"ESP 8266"},{"location":"#arduino-uno-r4-wifi","text":"The official instruction can be found here: https://docs.arduino.cc/tutorials/uno-r4-wifi/r4-wifi-getting-started/","title":"Arduino UNO R4 WiFi"},{"location":"#connecting-to-the-university-wifi","text":"Our university uses enterprise WiFi in its campus. Depending on your device, use the following codes to connect to the university WiFi:","title":"Connecting to the University WiFi"},{"location":"#esp-8266_1","text":"#include <ESP8266WiFi.h> extern \"C\" { #include \"user_interface.h\" #include \"wpa2_enterprise.h\" #include \"c_types.h\" } // SSID to connect to char ssid[] = \"TelU-Connect\"; char username[] = \"your_username\"; char identity[] = \"your_username\"; char password[] = \"your_password\"; void setup() { WiFi.mode(WIFI_STA); Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // Setting ESP into STATION mode only (no AP mode or dual mode) wifi_set_opmode(STATION_MODE); wifi_station_set_wpa2_enterprise_auth(1); wifi_station_set_enterprise_identity((uint8*)identity, strlen(identity)); wifi_station_set_enterprise_username((uint8*)username, strlen(username)); wifi_station_set_enterprise_password((uint8*)password, strlen((char*)password)); wifi_station_connect(); while (WiFi.status() != WL_CONNECTED) { delay(1000); Serial.print(\"-\"); } Serial.println(); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); } void loop() { }","title":"ESP 8266"},{"location":"#esp-32_1","text":"#include \"esp_eap_client.h\" #include <WiFi.h> const char* ssid = \"TelU-Connect\"; // your ssid #define EAP_ID \"USERNAME\" #define EAP_USERNAME \"USERNAME\" #define EAP_PASSWORD \"PASSWORD\" void setup() { Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // WPA2 enterprise magic starts here WiFi.disconnect(true); esp_eap_client_set_identity((uint8_t *)EAP_ID, strlen(EAP_ID)); esp_eap_client_set_username((uint8_t *)EAP_USERNAME, strlen(EAP_USERNAME)); esp_eap_client_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD)); esp_wifi_sta_enterprise_enable(); // WPA2 enterprise magic ends here WiFi.begin(ssid); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } Serial.println(\"\"); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); }","title":"ESP 32"},{"location":"#uno-r4-wifi","text":"","title":"Uno R4 WiFi"},{"location":"#assignments","text":"Create a reusable function that can be used easily to connect to the campus internet. The prototype of the function should look like one of the followings: - void connect_to_campus_wifi_esp866(char* id, char* pwd) - void connect_to_campus_wifi_esp32(char* id, char* pwd) - void connect_to_campus_wifi_unor4(char* id, char* pwd)","title":"Assignments"},{"location":"brokers/","text":"Brokers There are several brokers that we are going to try: - test.mosquito.org - local broker - serverles brokers (HiveMQ, EMQX) - managed brokers (Blynk, Antares) Playing with test.mosquitto.org Eclipse Mosquitto provides a simple broker in the cloud that we can use for testings. In fact, test.mosquitto.org can be considered as a serverless broker. Please note that at the moment, we will only use the unencrypted-unauthenticated type of connection . Thus, we will use the provided port number 1883. Local broker It is possible to install a broker in our own computer. In this case, our IoT devices connect to our computer directly. Internet connection becomes unnecessary. Setup the local broker This is a good documentations on how to install the broker on: Linux system: https://docs.vultr.com/install-mosquitto-mqtt-broker-on-ubuntu-20-04-server Windows system: https://cedalo.com/blog/how-to-install-mosquitto-mqtt-broker-on-windows/ -- follow step 1, 2, 5, 7, 8, 9, and 10. For step 5, follow only up to the point where we allow anonymous connections. Setup the clients Serverless brokers HiveMQ With HiveMQ, only secure connection is allowed (see this link. ) Next, create several user ids and passwords from the `Access Management1 menu. #include <ESP8266WiFi.h> #include <PubSubClient.h> #include <WiFiClientSecure.h> /****** WiFi Connection Details *******/ // This is a personal wifi, not an enterprise wifi! // You may need to chabge this part to connect to the campus wifi. const char* ssid = \"wifi_name\"; const char* password = \"wifi_password\"; /******* MQTT Broker Connection Details *******/ const char* mqtt_server = \"bcf21ddabed1412aaf638a09b4732f50.s1.eu.hivemq.cloud\"; const char* mqtt_username = \"Device01\"; const char* mqtt_password = \"Device01\"; const int mqtt_port = 8883; /**** Secure WiFi Connectivity Initialisation *****/ WiFiClientSecure espClient; /**** MQTT Client Initialisation Using WiFi Connection *****/ PubSubClient client(espClient); unsigned long lastMsg = 0; #define MSG_BUFFER_SIZE (50) char msg[MSG_BUFFER_SIZE]; /************* Connect to WiFi ***********/ void setup_wifi() { delay(10); Serial.print(\"\\nConnecting to \"); Serial.println(ssid); WiFi.mode(WIFI_STA); WiFi.begin(ssid, password); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } randomSeed(micros()); Serial.println(\"\\nWiFi connected\\nIP address: \"); Serial.println(WiFi.localIP()); } /************* Connect to MQTT Broker ***********/ void reconnect() { // Loop until we're reconnected while (!client.connected()) { Serial.print(\"Attempting MQTT connection...\"); // Attempt to connect if (client.connect(\"1\", mqtt_username, mqtt_password)) { Serial.println(\"connected\"); client.subscribe(\"topic1/#\"); // subscribe the topics here } else { Serial.print(\"failed, rc=\"); Serial.print(client.state()); Serial.println(\" try again in 5 seconds\"); // Wait 5 seconds before retrying delay(5000); } } } /***** Call back Method for Receiving MQTT messages ****/ void subscriberCallback(char* topic, byte* payload, unsigned int length) { String incommingMessage = \"\"; for (int i = 0; i < length; i++) incommingMessage+=(char)payload[i]; Serial.println(\"Message arrived [\"+String(topic)+\"]\"+incommingMessage); } /**** Method for Publishing MQTT Messages **********/ void publishMessage(const char* topic, String payload , boolean retained){ if (client.publish(topic, payload.c_str(), true)) Serial.println(\"Message publised [\"+String(topic)+\"]: \"+payload); } /**** Application Initialisation Function******/ void setup() { Serial.begin(115200); while (!Serial) delay(1); setup_wifi(); espClient.setInsecure(); client.setServer(mqtt_server, mqtt_port); client.setCallback(subscriberCallback); } /******** Main Function *************/ void loop() { if (!client.connected()) reconnect(); // check if client is connected client.loop(); publishMessage(\"topic1/subtopic1\", \"789\", true); delay(5000); } HiveMQ provides web client at: https://www.hivemq.com/demos/websocket-client/ Arduino tutorial: https://www.hivemq.com/blog/mqtt-on-arduino-nodemcu-esp8266-hivemq-cloud/#heading-connecting-the-node-mcu-board-to-the-arduino-ide-via-usb EMQX Managed brokers Blynk Antares","title":"Brokers"},{"location":"brokers/#brokers","text":"There are several brokers that we are going to try: - test.mosquito.org - local broker - serverles brokers (HiveMQ, EMQX) - managed brokers (Blynk, Antares)","title":"Brokers"},{"location":"brokers/#playing-with-testmosquittoorg","text":"Eclipse Mosquitto provides a simple broker in the cloud that we can use for testings. In fact, test.mosquitto.org can be considered as a serverless broker. Please note that at the moment, we will only use the unencrypted-unauthenticated type of connection . Thus, we will use the provided port number 1883.","title":"Playing with test.mosquitto.org"},{"location":"brokers/#local-broker","text":"It is possible to install a broker in our own computer. In this case, our IoT devices connect to our computer directly. Internet connection becomes unnecessary.","title":"Local broker"},{"location":"brokers/#setup-the-local-broker","text":"This is a good documentations on how to install the broker on:","title":"Setup the local broker"},{"location":"brokers/#linux-system","text":"https://docs.vultr.com/install-mosquitto-mqtt-broker-on-ubuntu-20-04-server","title":"Linux system:"},{"location":"brokers/#windows-system","text":"https://cedalo.com/blog/how-to-install-mosquitto-mqtt-broker-on-windows/ -- follow step 1, 2, 5, 7, 8, 9, and 10. For step 5, follow only up to the point where we allow anonymous connections.","title":"Windows system:"},{"location":"brokers/#setup-the-clients","text":"","title":"Setup the clients"},{"location":"brokers/#serverless-brokers","text":"","title":"Serverless brokers"},{"location":"brokers/#hivemq","text":"With HiveMQ, only secure connection is allowed (see this link. ) Next, create several user ids and passwords from the `Access Management1 menu. #include <ESP8266WiFi.h> #include <PubSubClient.h> #include <WiFiClientSecure.h> /****** WiFi Connection Details *******/ // This is a personal wifi, not an enterprise wifi! // You may need to chabge this part to connect to the campus wifi. const char* ssid = \"wifi_name\"; const char* password = \"wifi_password\"; /******* MQTT Broker Connection Details *******/ const char* mqtt_server = \"bcf21ddabed1412aaf638a09b4732f50.s1.eu.hivemq.cloud\"; const char* mqtt_username = \"Device01\"; const char* mqtt_password = \"Device01\"; const int mqtt_port = 8883; /**** Secure WiFi Connectivity Initialisation *****/ WiFiClientSecure espClient; /**** MQTT Client Initialisation Using WiFi Connection *****/ PubSubClient client(espClient); unsigned long lastMsg = 0; #define MSG_BUFFER_SIZE (50) char msg[MSG_BUFFER_SIZE]; /************* Connect to WiFi ***********/ void setup_wifi() { delay(10); Serial.print(\"\\nConnecting to \"); Serial.println(ssid); WiFi.mode(WIFI_STA); WiFi.begin(ssid, password); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } randomSeed(micros()); Serial.println(\"\\nWiFi connected\\nIP address: \"); Serial.println(WiFi.localIP()); } /************* Connect to MQTT Broker ***********/ void reconnect() { // Loop until we're reconnected while (!client.connected()) { Serial.print(\"Attempting MQTT connection...\"); // Attempt to connect if (client.connect(\"1\", mqtt_username, mqtt_password)) { Serial.println(\"connected\"); client.subscribe(\"topic1/#\"); // subscribe the topics here } else { Serial.print(\"failed, rc=\"); Serial.print(client.state()); Serial.println(\" try again in 5 seconds\"); // Wait 5 seconds before retrying delay(5000); } } } /***** Call back Method for Receiving MQTT messages ****/ void subscriberCallback(char* topic, byte* payload, unsigned int length) { String incommingMessage = \"\"; for (int i = 0; i < length; i++) incommingMessage+=(char)payload[i]; Serial.println(\"Message arrived [\"+String(topic)+\"]\"+incommingMessage); } /**** Method for Publishing MQTT Messages **********/ void publishMessage(const char* topic, String payload , boolean retained){ if (client.publish(topic, payload.c_str(), true)) Serial.println(\"Message publised [\"+String(topic)+\"]: \"+payload); } /**** Application Initialisation Function******/ void setup() { Serial.begin(115200); while (!Serial) delay(1); setup_wifi(); espClient.setInsecure(); client.setServer(mqtt_server, mqtt_port); client.setCallback(subscriberCallback); } /******** Main Function *************/ void loop() { if (!client.connected()) reconnect(); // check if client is connected client.loop(); publishMessage(\"topic1/subtopic1\", \"789\", true); delay(5000); } HiveMQ provides web client at: https://www.hivemq.com/demos/websocket-client/ Arduino tutorial: https://www.hivemq.com/blog/mqtt-on-arduino-nodemcu-esp8266-hivemq-cloud/#heading-connecting-the-node-mcu-board-to-the-arduino-ide-via-usb","title":"HiveMQ"},{"location":"brokers/#emqx","text":"","title":"EMQX"},{"location":"brokers/#managed-brokers","text":"","title":"Managed brokers"},{"location":"brokers/#blynk","text":"","title":"Blynk"},{"location":"brokers/#antares","text":"","title":"Antares"},{"location":"info/","text":"Information and scopes Information The following materials are used for hands-on activities in undergraduate IoT class at the Biomedical Engineering, Telkom University, Bandung. Scopes There are many MQTT client implementations for Arduino. Here, we will -- as much as possible -- use PubSubClient by Nick O'Leary. We will also stick to the the unencrypted-unauthenticated type of connection as much as possible, except for some cloud-based brokers that strictly require encryption and authentication.","title":"Information and scopes"},{"location":"info/#information-and-scopes","text":"","title":"Information and scopes"},{"location":"info/#information","text":"The following materials are used for hands-on activities in undergraduate IoT class at the Biomedical Engineering, Telkom University, Bandung.","title":"Information"},{"location":"info/#scopes","text":"There are many MQTT client implementations for Arduino. Here, we will -- as much as possible -- use PubSubClient by Nick O'Leary. We will also stick to the the unencrypted-unauthenticated type of connection as much as possible, except for some cloud-based brokers that strictly require encryption and authentication.","title":"Scopes"}]}