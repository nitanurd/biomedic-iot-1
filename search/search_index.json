{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"First-time setup Before we start playing with the MQTT protocol for our IoT class, there are some initial preparations that we must do. The supported devices In the class, we can either use ESP 32 or Lolin Wemos D1 Mini . The later -- especially the cloned version -- is very cheap! However, we can always use other IoT enabled devices, such as Arduino UNO R4 WiFi, Raspberry Pi, and many more. Arduino IDE Download and install the Arduino IDE from the official website . Additional board manager ESP 8266 and ESP 32 are not in the default Arduino board list. For ESP 8266, add http://arduino.esp8266.com/stable/package_esp8266com_index.json to the Additional Boards Manager URLs , which can be found in this menu: File >> \"Preferences >> Settings As for ESP 32, add https://espressif.github.io/arduino-esp32/package_esp32_index.json to the Additional Boards Manager URLs ESP 32 Follow this official documentation form Espressif: https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html ESP 8266 Follow this official documentation form Espressif: https://arduino-esp8266.readthedocs.io/en/latest/installing.html The cheapest 8266 board is the clone version which uses CH340/341 chip for communication purposes. In this case, if you are using Windows, follow this instruction to install the necessary driver: - Video guide: https://www.youtube.com/watch?v=IxH_1LApjPc - Driver: v3.4 or v3.5 There are some reports that the latest driver is problematic. Thus, we will use v3.4 or v3.5. Finally, in the Arduino IDE, we can now set the device to: \"LOLIN (WEMOS) D1 mini (clone)\". Do this from the menu Tools >> Board >> ESP 8266 Boards (3.1.2) >> LOLIN (WEMOS) D1 mini (clone) Connecting to the University WiFi Our university uses enterprise WiFi in its campus. Depending on your device, use the following codes to connect to the university WiFi: ESP 8266 #include <ESP8266WiFi.h> extern \"C\" { #include \"user_interface.h\" #include \"wpa2_enterprise.h\" #include \"c_types.h\" } // SSID to connect to char ssid[] = \"TelU-Connect\"; char username[] = \"your_username\"; char identity[] = \"your_username\"; char password[] = \"your_password\"; void setup() { WiFi.mode(WIFI_STA); Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // Setting ESP into STATION mode only (no AP mode or dual mode) wifi_set_opmode(STATION_MODE); wifi_station_set_wpa2_enterprise_auth(1); wifi_station_set_enterprise_identity((uint8*)identity, strlen(identity)); wifi_station_set_enterprise_username((uint8*)username, strlen(username)); wifi_station_set_enterprise_password((uint8*)password, strlen((char*)password)); wifi_station_connect(); while (WiFi.status() != WL_CONNECTED) { delay(1000); Serial.print(\"-\"); } Serial.println(); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); } void loop() { } ESP 32 #include \"esp_eap_client.h\" #include <WiFi.h> const char* ssid = \"TelU-Connect\"; // your ssid #define EAP_ID \"USERNAME\" #define EAP_USERNAME \"USERNAME\" #define EAP_PASSWORD \"PASSWORD\" void setup() { Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // WPA2 enterprise magic starts here WiFi.disconnect(true); esp_eap_client_set_identity((uint8_t *)EAP_ID, strlen(EAP_ID)); esp_eap_client_set_username((uint8_t *)EAP_USERNAME, strlen(EAP_USERNAME)); esp_eap_client_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD)); esp_wifi_sta_enterprise_enable(); // WPA2 enterprise magic ends here WiFi.begin(ssid); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } Serial.println(\"\"); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); } Assignment Create a reusable function that can be used easily to connect to the campus internet. The prototype of the function should look like one of the followings: - void connect_to_campus_wifi_esp866(char* ssid, char* id, char* pwd) - void connect_to_campus_wifi_esp32(char* ssid, char* id, char* pwd) - void connect_to_campus_wifi_unor4(char* ssid, char* id, char* pwd)","title":"First-time setup"},{"location":"#first-time-setup","text":"Before we start playing with the MQTT protocol for our IoT class, there are some initial preparations that we must do.","title":"First-time setup"},{"location":"#the-supported-devices","text":"In the class, we can either use ESP 32 or Lolin Wemos D1 Mini . The later -- especially the cloned version -- is very cheap! However, we can always use other IoT enabled devices, such as Arduino UNO R4 WiFi, Raspberry Pi, and many more.","title":"The supported devices"},{"location":"#arduino-ide","text":"Download and install the Arduino IDE from the official website .","title":"Arduino IDE"},{"location":"#additional-board-manager","text":"ESP 8266 and ESP 32 are not in the default Arduino board list. For ESP 8266, add http://arduino.esp8266.com/stable/package_esp8266com_index.json to the Additional Boards Manager URLs , which can be found in this menu: File >> \"Preferences >> Settings As for ESP 32, add https://espressif.github.io/arduino-esp32/package_esp32_index.json to the Additional Boards Manager URLs","title":"Additional board manager"},{"location":"#esp-32","text":"Follow this official documentation form Espressif: https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html","title":"ESP 32"},{"location":"#esp-8266","text":"Follow this official documentation form Espressif: https://arduino-esp8266.readthedocs.io/en/latest/installing.html The cheapest 8266 board is the clone version which uses CH340/341 chip for communication purposes. In this case, if you are using Windows, follow this instruction to install the necessary driver: - Video guide: https://www.youtube.com/watch?v=IxH_1LApjPc - Driver: v3.4 or v3.5 There are some reports that the latest driver is problematic. Thus, we will use v3.4 or v3.5. Finally, in the Arduino IDE, we can now set the device to: \"LOLIN (WEMOS) D1 mini (clone)\". Do this from the menu Tools >> Board >> ESP 8266 Boards (3.1.2) >> LOLIN (WEMOS) D1 mini (clone)","title":"ESP 8266"},{"location":"#connecting-to-the-university-wifi","text":"Our university uses enterprise WiFi in its campus. Depending on your device, use the following codes to connect to the university WiFi:","title":"Connecting to the University WiFi"},{"location":"#esp-8266_1","text":"#include <ESP8266WiFi.h> extern \"C\" { #include \"user_interface.h\" #include \"wpa2_enterprise.h\" #include \"c_types.h\" } // SSID to connect to char ssid[] = \"TelU-Connect\"; char username[] = \"your_username\"; char identity[] = \"your_username\"; char password[] = \"your_password\"; void setup() { WiFi.mode(WIFI_STA); Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // Setting ESP into STATION mode only (no AP mode or dual mode) wifi_set_opmode(STATION_MODE); wifi_station_set_wpa2_enterprise_auth(1); wifi_station_set_enterprise_identity((uint8*)identity, strlen(identity)); wifi_station_set_enterprise_username((uint8*)username, strlen(username)); wifi_station_set_enterprise_password((uint8*)password, strlen((char*)password)); wifi_station_connect(); while (WiFi.status() != WL_CONNECTED) { delay(1000); Serial.print(\"-\"); } Serial.println(); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); } void loop() { }","title":"ESP 8266"},{"location":"#esp-32_1","text":"#include \"esp_eap_client.h\" #include <WiFi.h> const char* ssid = \"TelU-Connect\"; // your ssid #define EAP_ID \"USERNAME\" #define EAP_USERNAME \"USERNAME\" #define EAP_PASSWORD \"PASSWORD\" void setup() { Serial.begin(115200); delay(10); Serial.println(); Serial.print(\"Connecting to \"); Serial.println(ssid); // WPA2 enterprise magic starts here WiFi.disconnect(true); esp_eap_client_set_identity((uint8_t *)EAP_ID, strlen(EAP_ID)); esp_eap_client_set_username((uint8_t *)EAP_USERNAME, strlen(EAP_USERNAME)); esp_eap_client_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD)); esp_wifi_sta_enterprise_enable(); // WPA2 enterprise magic ends here WiFi.begin(ssid); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } Serial.println(\"\"); Serial.println(\"WiFi connected\"); Serial.println(\"IP address: \"); Serial.println(WiFi.localIP()); }","title":"ESP 32"},{"location":"#assignment","text":"Create a reusable function that can be used easily to connect to the campus internet. The prototype of the function should look like one of the followings: - void connect_to_campus_wifi_esp866(char* ssid, char* id, char* pwd) - void connect_to_campus_wifi_esp32(char* ssid, char* id, char* pwd) - void connect_to_campus_wifi_unor4(char* ssid, char* id, char* pwd)","title":"Assignment"},{"location":"brokers/","text":"Brokers There are several brokers that we are going to try: - test.mosquito.org - local broker - serverles brokers (HiveMQ, EMQX, etc) - managed brokers (Blynk, Antares, etc) Playing with test.mosquitto.org Eclipse Mosquitto provides a simple broker in the cloud that we can use for testings. In fact, test.mosquitto.org can be considered as another serverless broker. We will use port number 1883 for unencrypted-unauthenticated connections. Local broker It is possible to install a broker in our own computer. In this case, our IoT devices connect to our computer directly. Internet connection becomes unnecessary. Setup the local broker These are some good documentations on how to install the broker on Linux and Windows systems. We must make sure that we allow anonymous connectios to the broker . Linux system: https://docs.vultr.com/install-mosquitto-mqtt-broker-on-ubuntu-20-04-server Windows system: https://cedalo.com/blog/how-to-install-mosquitto-mqtt-broker-on-windows/ -- follow step 1, 2, 5, 7, 8, 9, and 10. For step 5, follow only up to the point where we allow anonymous connections. Clients One way to create a client is by simulating the client from the same computer. Here, we can use the mosquitto_pub and mosquitto_sub commands by using the following formats. mosquitto_pub -m PAYLOAD -t TOPIC mosquitto_sub -t TOPIC To connect from our IoT devices, we can adapt the provided Arduino MQTT client template to connect to our local broker. Please note that our local broker accepts anonymous connections . Assignment Adapt the provided Arduino MQTT client template to connect to your local broker. HiveMQ Create and run the broker First, create a HiveMQ account for free and sign in to that account. After that, click Create New Cluster >> Manage Cluster . In HiveMQ, clients must have accounts and passwords. Therefore, we need to create at least one username and password which can be done from the Access Management menu. EMQX (assignment) EMQX also provide a free serverless broker similar to HiveMQ. Now, let us setup a connection to EMQX broker from an Arduino MQTT client. This will become our class assignment . Blynk","title":"Brokers"},{"location":"brokers/#brokers","text":"There are several brokers that we are going to try: - test.mosquito.org - local broker - serverles brokers (HiveMQ, EMQX, etc) - managed brokers (Blynk, Antares, etc)","title":"Brokers"},{"location":"brokers/#playing-with-testmosquittoorg","text":"Eclipse Mosquitto provides a simple broker in the cloud that we can use for testings. In fact, test.mosquitto.org can be considered as another serverless broker. We will use port number 1883 for unencrypted-unauthenticated connections.","title":"Playing with test.mosquitto.org"},{"location":"brokers/#local-broker","text":"It is possible to install a broker in our own computer. In this case, our IoT devices connect to our computer directly. Internet connection becomes unnecessary.","title":"Local broker"},{"location":"brokers/#setup-the-local-broker","text":"These are some good documentations on how to install the broker on Linux and Windows systems. We must make sure that we allow anonymous connectios to the broker .","title":"Setup the local broker"},{"location":"brokers/#linux-system","text":"https://docs.vultr.com/install-mosquitto-mqtt-broker-on-ubuntu-20-04-server","title":"Linux system:"},{"location":"brokers/#windows-system","text":"https://cedalo.com/blog/how-to-install-mosquitto-mqtt-broker-on-windows/ -- follow step 1, 2, 5, 7, 8, 9, and 10. For step 5, follow only up to the point where we allow anonymous connections.","title":"Windows system:"},{"location":"brokers/#clients","text":"One way to create a client is by simulating the client from the same computer. Here, we can use the mosquitto_pub and mosquitto_sub commands by using the following formats. mosquitto_pub -m PAYLOAD -t TOPIC mosquitto_sub -t TOPIC To connect from our IoT devices, we can adapt the provided Arduino MQTT client template to connect to our local broker. Please note that our local broker accepts anonymous connections .","title":"Clients"},{"location":"brokers/#assignment","text":"Adapt the provided Arduino MQTT client template to connect to your local broker.","title":"Assignment"},{"location":"brokers/#hivemq","text":"","title":"HiveMQ"},{"location":"brokers/#create-and-run-the-broker","text":"First, create a HiveMQ account for free and sign in to that account. After that, click Create New Cluster >> Manage Cluster . In HiveMQ, clients must have accounts and passwords. Therefore, we need to create at least one username and password which can be done from the Access Management menu.","title":"Create and run the broker"},{"location":"brokers/#emqx-assignment","text":"EMQX also provide a free serverless broker similar to HiveMQ. Now, let us setup a connection to EMQX broker from an Arduino MQTT client. This will become our class assignment .","title":"EMQX (assignment)"},{"location":"brokers/#blynk","text":"","title":"Blynk"},{"location":"clients/","text":"Clients Template for an Arduino MQTT client The following code listing is the general template for MQTT clients by using the Arduino PubSubClient librar y. Adapt the client code by changing the code sections that have 3 exclamation marks ( !!! ). #include <ESP8266WiFi.h> #define CAMPUS_WIFI //#define ANONYMOUS // enable this line for using anonymous connection !!! #ifdef CAMPUS_WIFI extern \"C\" { #include \"user_interface.h\" #include \"wpa2_enterprise.h\" #include \"c_types.h\" } #endif #include <PubSubClient.h> #ifdef ANONYNOUS #include <WiFiClient.h> #else #include <WiFiClientSecure.h> #endif /******* MQTT Broker Connection Details *******/ // Change this section according to the broker !!! #ifdef ANONYMOUS const int mqtt_port = 1883; #else const int mqtt_port = 8883; #endif const char* mqtt_server = \"pf11f770.ala.asia-southeast1.emqxsl.com\"; const char* mqtt_clientid = \"Device01\"; const char* mqtt_username = \"Device01\"; const char* mqtt_password = \"Device01\"; const char* wifi_id = \"wifi_id\"; const char* wifi_username = \"wifi_username\"; const char* wifi_password = \"wifi_password\"; /***********************************************/ /**** Secure WiFi Connectivity Initialisation *****/ #ifdef ANONYMOUS WiFiClient espClient; #else WiFiClientSecure espClient; #endif /**** MQTT Client Initialisation Using WiFi Connection *****/ PubSubClient client(espClient); /************* Connect to campus WiFi ***********/ void connect_to_campus_wifi_esp866(const char* ssid, const char* userid, const char* pwd) { Serial.print(\"\\nConnecting to \"); Serial.println(ssid); WiFi.mode(WIFI_STA); wifi_set_opmode(STATION_MODE); wifi_station_set_wpa2_enterprise_auth(1); wifi_station_set_enterprise_identity((uint8*)userid, strlen(userid)); wifi_station_set_enterprise_username((uint8*)userid, strlen(userid)); wifi_station_set_enterprise_password((uint8*)pwd, strlen((char*)pwd)); wifi_station_connect(); while (WiFi.status() != WL_CONNECTED) { delay(1000); Serial.print(\"-\"); } Serial.println(); Serial.println(\"\\nWiFi connected\\nIP address: \"); Serial.println(WiFi.localIP()); } /************* Connect to home WiFi ***********/ void connect_to_home_wifi(const char* ssid, const char* pwd) { Serial.print(\"\\nConnecting to \"); Serial.println(ssid); WiFi.mode(WIFI_STA); WiFi.begin(ssid, pwd); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } randomSeed(micros()); Serial.println(\"\\nWiFi connected\\nIP address: \"); Serial.println(WiFi.localIP()); } /************* Connect to MQTT Broker ***********/ void reconnect() { // Loop until we're reconnected while (!client.connected()) { Serial.print(\"Attempting MQTT connection...\"); #ifdef ANONYMOUS if (client.connect(mqtt_clientid)) #else if (client.connect(mqtt_clientid, mqtt_username, mqtt_password)) #endif Serial.println(\"connected\"); else { Serial.print(\"failed, rc=\"); Serial.print(client.state()); Serial.println(\" try again in 5 seconds\"); // Wait 5 seconds before retrying delay(5000); } } } /***** Call back Method for Receiving MQTT messages and Switching LED ****/ void callback(char* topic, byte* payload, unsigned int length) { String incommingMessage = \"\"; for (int i = 0; i < length; i++) incommingMessage+=(char)payload[i]; Serial.println(\"Message arrived [\"+String(topic)+\"]: \"+incommingMessage); } /**** Method for Publishing MQTT Messages **********/ void publishMessage(const char* topic, String payload , boolean retained){ if (client.publish(topic, payload.c_str(), true)) Serial.println(\"Message published [\"+String(topic)+\"]: \"+payload); } /**** Application Initialisation Function******/ void setup() { Serial.begin(115200); while (!Serial) delay(1); #ifdef CAMPUS_WIFI connect_to_campus_wifi_esp866(wifi_id, wifi_username, wifi_password); #else connect_to_home_wifi(wifi_id, wifi_password) #endif #ifndef ANONYMOUS espClient.setInsecure(); #endif // Connect to the broker client.setServer(mqtt_server, mqtt_port); client.setCallback(callback); } /******** Main Function *************/ void loop() { if (!client.connected()) { reconnect(); client.subscribe(\"topic2/#\"); // Subscribe the topics here !!! } client.loop(); // Publish something !!! publishMessage(\"topic1/subtopic1\", \"1234567890\", true); delay(5000); }","title":"Clients"},{"location":"clients/#clients","text":"","title":"Clients"},{"location":"clients/#template-for-an-arduino-mqtt-client","text":"The following code listing is the general template for MQTT clients by using the Arduino PubSubClient librar y. Adapt the client code by changing the code sections that have 3 exclamation marks ( !!! ). #include <ESP8266WiFi.h> #define CAMPUS_WIFI //#define ANONYMOUS // enable this line for using anonymous connection !!! #ifdef CAMPUS_WIFI extern \"C\" { #include \"user_interface.h\" #include \"wpa2_enterprise.h\" #include \"c_types.h\" } #endif #include <PubSubClient.h> #ifdef ANONYNOUS #include <WiFiClient.h> #else #include <WiFiClientSecure.h> #endif /******* MQTT Broker Connection Details *******/ // Change this section according to the broker !!! #ifdef ANONYMOUS const int mqtt_port = 1883; #else const int mqtt_port = 8883; #endif const char* mqtt_server = \"pf11f770.ala.asia-southeast1.emqxsl.com\"; const char* mqtt_clientid = \"Device01\"; const char* mqtt_username = \"Device01\"; const char* mqtt_password = \"Device01\"; const char* wifi_id = \"wifi_id\"; const char* wifi_username = \"wifi_username\"; const char* wifi_password = \"wifi_password\"; /***********************************************/ /**** Secure WiFi Connectivity Initialisation *****/ #ifdef ANONYMOUS WiFiClient espClient; #else WiFiClientSecure espClient; #endif /**** MQTT Client Initialisation Using WiFi Connection *****/ PubSubClient client(espClient); /************* Connect to campus WiFi ***********/ void connect_to_campus_wifi_esp866(const char* ssid, const char* userid, const char* pwd) { Serial.print(\"\\nConnecting to \"); Serial.println(ssid); WiFi.mode(WIFI_STA); wifi_set_opmode(STATION_MODE); wifi_station_set_wpa2_enterprise_auth(1); wifi_station_set_enterprise_identity((uint8*)userid, strlen(userid)); wifi_station_set_enterprise_username((uint8*)userid, strlen(userid)); wifi_station_set_enterprise_password((uint8*)pwd, strlen((char*)pwd)); wifi_station_connect(); while (WiFi.status() != WL_CONNECTED) { delay(1000); Serial.print(\"-\"); } Serial.println(); Serial.println(\"\\nWiFi connected\\nIP address: \"); Serial.println(WiFi.localIP()); } /************* Connect to home WiFi ***********/ void connect_to_home_wifi(const char* ssid, const char* pwd) { Serial.print(\"\\nConnecting to \"); Serial.println(ssid); WiFi.mode(WIFI_STA); WiFi.begin(ssid, pwd); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } randomSeed(micros()); Serial.println(\"\\nWiFi connected\\nIP address: \"); Serial.println(WiFi.localIP()); } /************* Connect to MQTT Broker ***********/ void reconnect() { // Loop until we're reconnected while (!client.connected()) { Serial.print(\"Attempting MQTT connection...\"); #ifdef ANONYMOUS if (client.connect(mqtt_clientid)) #else if (client.connect(mqtt_clientid, mqtt_username, mqtt_password)) #endif Serial.println(\"connected\"); else { Serial.print(\"failed, rc=\"); Serial.print(client.state()); Serial.println(\" try again in 5 seconds\"); // Wait 5 seconds before retrying delay(5000); } } } /***** Call back Method for Receiving MQTT messages and Switching LED ****/ void callback(char* topic, byte* payload, unsigned int length) { String incommingMessage = \"\"; for (int i = 0; i < length; i++) incommingMessage+=(char)payload[i]; Serial.println(\"Message arrived [\"+String(topic)+\"]: \"+incommingMessage); } /**** Method for Publishing MQTT Messages **********/ void publishMessage(const char* topic, String payload , boolean retained){ if (client.publish(topic, payload.c_str(), true)) Serial.println(\"Message published [\"+String(topic)+\"]: \"+payload); } /**** Application Initialisation Function******/ void setup() { Serial.begin(115200); while (!Serial) delay(1); #ifdef CAMPUS_WIFI connect_to_campus_wifi_esp866(wifi_id, wifi_username, wifi_password); #else connect_to_home_wifi(wifi_id, wifi_password) #endif #ifndef ANONYMOUS espClient.setInsecure(); #endif // Connect to the broker client.setServer(mqtt_server, mqtt_port); client.setCallback(callback); } /******** Main Function *************/ void loop() { if (!client.connected()) { reconnect(); client.subscribe(\"topic2/#\"); // Subscribe the topics here !!! } client.loop(); // Publish something !!! publishMessage(\"topic1/subtopic1\", \"1234567890\", true); delay(5000); }","title":"Template for an Arduino MQTT client"},{"location":"info/","text":"Information and scopes Information The following materials are used for hands-on activities in undergraduate IoT class at the Biomedical Engineering, Telkom University, Bandung. Scopes There are many MQTT client implementations for Arduino. Here, we will -- as much as possible -- use PubSubClient by Nick O'Leary. We will also stick to the the unencrypted-unauthenticated type of connection as much as possible, except for some cloud-based brokers that strictly require encryption and authentication.","title":"Information and scopes"},{"location":"info/#information-and-scopes","text":"","title":"Information and scopes"},{"location":"info/#information","text":"The following materials are used for hands-on activities in undergraduate IoT class at the Biomedical Engineering, Telkom University, Bandung.","title":"Information"},{"location":"info/#scopes","text":"There are many MQTT client implementations for Arduino. Here, we will -- as much as possible -- use PubSubClient by Nick O'Leary. We will also stick to the the unencrypted-unauthenticated type of connection as much as possible, except for some cloud-based brokers that strictly require encryption and authentication.","title":"Scopes"}]}